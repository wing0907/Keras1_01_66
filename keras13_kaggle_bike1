# https://www.kaggle.com/competitions/bike-sharing-demand

import numpy as np
import pandas as pd
print(np.__version__)       # 1.23.0s
print(pd.__version__)       # 2.2.3

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_squared_error

#1. 데이터
path = './_data/kaggle/bike/'         # 상대경로
# path = '.\_data\kaggle\\bike\\'       #\b \n \a \' 는 예약어. 예약어 사용시 노란줄 표출
# path = '.\\_data\\kaggle\\bike\\'     # \n 줄바꿈 
# path = './/_data//kaggle//bike//'

# path = 'c:/Study25/_data/kaggle/bike/' # 절대경로


train_csv = pd.read_csv(path + 'train.csv', index_col=0)
test_csv = pd.read_csv(path + 'test.csv', index_col=0)
sampleSubmission_csv = pd.read_csv(path + 'sampleSubmission.csv',)

print(train_csv)            # [10886 rows x 11 columns]
print(test_csv)             # [6493 rows x 8 columns]
print(train_csv.shape)      # (10886, 11)
print(test_csv.shape)       # (6493, 8)
print(sampleSubmission_csv.shape) # (6493, 2)

print(train_csv.columns)
# Index(['season', 'holiday', 'workingday', 'weather', 'temp', 'atemp', 'humidity', 'windspeed', 'casual', 'registered', 'count'])
print(test_csv.columns)
# Index(['season', 'holiday', 'workingday', 'weather', 'temp', 'atemp', 'humidity', 'windspeed'])
print(sampleSubmission_csv.columns)
# Index(['count'])

print(train_csv.info())
print(train_csv.isnull().sum())     # 결측치 없음
print(test_csv.isna().sum())        # 결측치 없음

print(train_csv.describe())
########## x와 y 분리 #############
x = train_csv.drop(['casual', 'registered', 'count'], axis=1)
print(x)            # [10886 rows x 8 columns]
y = train_csv['count']
print(y.shape)      # (10886,) pandas '시리즈' = 벡터형태, '데이터 프레임' = 행렬형태

x_train, x_test, y_train, y_test = train_test_split(
    x, y,
    test_size=0.3,
    random_state=517
)

#2. 모델구성
model = Sequential()
model.add(Dense(30, input_dim=8, activation='relu'))
model.add(Dense(50, activation='relu'))
model.add(Dense(100, activation='relu'))
model.add(Dense(200, activation='relu'))
model.add(Dense(100, activation='relu'))
model.add(Dense(50, activation='relu'))
model.add(Dense(30, activation='relu'))
model.add(Dense(1, activation='linear',)) # activation을 안줬을 경우 디폴트값이 linear



#3. 컴파일, 훈련
model.compile(loss='mse', optimizer='adam')
hist = model.fit(x_train, y_train, epochs=200, batch_size=32,
          verbose=1,
          validation_split=0.2)

print('=========  hist  ========')
print(hist)     # <keras.callbacks.History object at 0x0000022D52E9AC10>
print('=========  history  ========')
print(hist.history)
print('=========  loss  ========') #loss 값만 보고 싶을 경우.
print(hist.history['loss'])
print('=========  val_loss  ========')
print(hist.history['val_loss'])

# 그래프 그리기
import matplotlib.pyplot as plt
import matplotlib
matplotlib.rcParams['font.family'] = 'Malgun Gothic'  # 윈도우
matplotlib.rcParams['axes.unicode_minus'] = False 

plt.figure(figsize=(9,6))       # 9 x 6 사이즈
plt.plot(hist.history['loss'], c='red', label='loss')  # y값만 넣으면 시간순으로 그린 그림
plt.plot(hist.history['val_loss'], c='blue', label='val_loss')
plt.title('캐글 바이크 Loss')
plt.xlabel('epoch')
plt.ylabel('loss')
plt.legend(loc='upper right')       #우측 상단에 label 표시
plt.grid()                          #격자 표시
plt.show()



#4. 평가, 예측
loss = model.evaluate(x_test, y_test)
results = model.predict([x_test])

y_predict = model.predict(x_test)
r2 = r2_score(y_test, results)

def RMSE(y_test, y_predict):
    return np.sqrt(mean_squared_error(y_test, y_predict))
rmse = RMSE(y_test, results)

from sklearn.metrics import mean_squared_log_error

# def RMSLE (y_test, y_predict):
#     return np.sqrt(mean_squared_log_error(np.maximum(y_test, 0), np.maximum(y_predict, 0)))

# rmsle = RMSLE(y_test, results)

### csv 파일 만들기 ###
y_submit = model.predict(test_csv)
print(y_submit.shape)  # (6493, 1)

# exit()

print(sampleSubmission_csv)
sampleSubmission_csv['count'] = y_submit
print(sampleSubmission_csv)

sampleSubmission_csv.to_csv(path + 'sampleSubmission_0522_1629.csv', index=False ) #디폴트 True


print('[loss]:', loss)
print('[rmse]:', rmse)
print('[r2]:', r2)
# print('[rmsle]', rmsle)


# 0522_1449  
# [loss]: 24998.2578125
# [rmse]: 158.1083924740492
# [r2]: 0.27469422216142536

# 0522_1615     1647 epoch100 bs 64
# [loss]: 22829.515625
# [rmse]: 151.09437804612807
# [r2]: 0.33761894660567715

# 0522_1620 rs 1647 epoch 100 bs 64
# [loss]: 22833.552734375
# [rmse]: 151.10774888660123
# [r2]: 0.33750170884492914

# 0522_1629 rs 498 epoch 100 bs 32
# [loss]: 22283.150390625
# [rmse]: 149.2754163843761
# [r2]: 0.32148976897352044